
function varargout = RRR_Robot(varargin)
% RRR_ROBOT MATLAB code for RRR_Robot.fig
%      RRR_ROBOT, by itself, creates a new RRR_ROBOT or raises the existing
%      singleton*.
%
%      H = RRR_ROBOT returns the handle to a new RRR_ROBOT or the handle to
%      the existing singleton*.
%
%      RRR_ROBOT('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in RRR_ROBOT.M with the given input arguments.
%
%      RRR_ROBOT('Property','Value',...) creates a new RRR_ROBOT or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before RRR_Robot_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to RRR_Robot_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Last Modified by GUIDE v2.5 03-May-2024 23:27:29

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @RRR_Robot_OpeningFcn, ...
                   'gui_OutputFcn',  @RRR_Robot_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before RRR_Robot is made visible.
function RRR_Robot_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to RRR_Robot (see VARARGIN)

% Choose default command line output for RRR_Robot
handles.output = hObject;

% Prompt user for number of links
prompt = {'Enter the number of links:'};
dlgtitle = 'Number of Links';
dims = [1 35];
definput = {'3'}; % Default to 3 links
num_links = str2double(inputdlg(prompt,dlgtitle,dims,definput));

% Create Theta and Alpha UI elements dynamically based on num_links
for i = 1:num_links
    % Create Theta text boxes
    handles.(['Theta_', num2str(i)]) = uicontrol('style', 'edit', 'units', 'normalized', ...
        'position', [0.1 0.9-(i*0.1) 0.1 0.05], 'string', '', 'callback', @Theta_Callback);
    % Create Alpha text boxes
    handles.(['Alpha_', num2str(i)]) = uicontrol('style', 'edit', 'units', 'normalized', ...
        'position', [0.3 0.9-(i*0.1) 0.1 0.05], 'string', '', 'callback', @Alpha_Callback);
    % Create Link Length text boxes
    handles.(['Length_', num2str(i)]) = uicontrol('style', 'edit', 'units', 'normalized', ...
        'position', [0.5 0.9-(i*0.1) 0.1 0.05], 'string', '', 'callback', @Length_Callback);
end

% Store number of links in handles structure for later use
handles.num_links = num_links;

% Create text boxes for end effector position
handles.Pos_X = uicontrol('style', 'edit', 'units', 'normalized', ...
        'position', [0.4 0.9 0.1 0.05], 'string', 'X', 'callback', @Pos_X_Callback);
handles.Pos_Y = uicontrol('style', 'edit', 'units', 'normalized', ...
        'position', [0.6 0.9 0.1 0.05], 'string', 'Y', 'callback', @Pos_Y_Callback);
handles.Pos_Z = uicontrol('style', 'edit', 'units', 'normalized', ...
        'position', [0.8 0.9 0.1 0.05], 'string', 'Z', 'callback', @Pos_Z_Callback);


% Update handles structure
guidata(hObject, handles);

% UIWAIT makes RRR_Robot wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = RRR_Robot_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


function Theta_Callback(hObject, eventdata, handles)
% hObject    handle to the text box that called this callback (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of text box as text
%        str2double(get(hObject,'String')) returns contents of text box as a double


% --- Executes during object creation, after setting all properties.
function Theta_CreateFcn(hObject, eventdata, handles)
% hObject    handle to the text box that will be created (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function Alpha_Callback(hObject, eventdata, handles)
% hObject    handle to the text box that called this callback (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of text box as text
%        str2double(get(hObject,'String')) returns contents of text box as a double


% --- Executes during object creation, after setting all properties.
function Alpha_CreateFcn(hObject, eventdata, handles)
% hObject    handle to the text box that will be created (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function Pos_X_Callback(hObject, eventdata, handles)
% hObject    handle to Pos_X (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Pos_X as text
%        str2double(get(hObject,'String')) returns contents of Pos_X as a double


% --- Executes during object creation, after setting all properties.
function Pos_X_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Pos_X (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function Pos_Y_Callback(hObject, eventdata, handles)
% hObject    handle to Pos_Y (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Pos_Y as text
%        str2double(get(hObject,'String')) returns contents of Pos_Y as a double


% --- Executes during object creation, after setting all properties.
function Pos_Y_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Pos_Y (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function Pos_Z_Callback(hObject, eventdata, handles)
% hObject    handle to Pos_Z (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Pos_Z as text
%        str2double(get(hObject,'String')) returns contents of Pos_Z as a double


% --- Executes during object creation, after setting all properties.
function Pos_Z_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Pos_Z (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes on button press in btn_Forward.
% --- Executes on button press in btn_Forward.
function btn_Forward_Callback(hObject, eventdata, handles)
% hObject    handle to btn_Forward (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
Th = zeros(1, handles.num_links);
Alpha = zeros(1, handles.num_links);
L = zeros(1, handles.num_links);
for i = 1:handles.num_links
    Th(i) = str2double(handles.(['Theta_', num2str(i)]).String) * pi / 180;
    Alpha(i) = str2double(handles.(['Alpha_', num2str(i)]).String) * pi / 180;
    L(i) = str2double(handles.(['Length_', num2str(i)]).String);
end

for i = 1:handles.num_links
    Thetas(i) = str2double(handles.(['Theta_' num2str(i)]).String) * pi / 180; % Store angles
    Alphas(i) = str2double(handles.(['Alpha_' num2str(i)]).String) * pi / 180; % Store alphas
    Lengths(i) = str2double(handles.(['Length_' num2str(i)]).String); % Store lengths
end

L = Link.empty(handles.num_links, 0); % Create an empty array of links

for i = 1:handles.num_links
    L(i) = Link([0 0 Lengths(i) 0 + Alphas(i)]); % Create links with corresponding lengths and alphas
end

Robot = SerialLink(L);
Robot.name = 'RRR_Robot';

Robot.plot(Thetas);

T = Robot.fkine(Thetas);

handles.Pos_X.String = num2str(T.t(1));
handles.Pos_Y.String = num2str(T.t(2));
handles.Pos_Z.String = num2str(T.t(3));


% --- Executes on button press in btn_Inverse.

% --- Executes on button press in btn_Inverse.
function btn_Inverse_Callback(hObject, eventdata, handles)
% hObject    handle to btn_Inverse (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% X = str2double(handles.Pos_X.String); % Get the desired end-effector position entered by the user
% Y = str2double(handles.Pos_Y.String);
% Z = str2double(handles.Pos_Z.String);
% Alpha = zeros(1, handles.num_links);
% L = zeros(1, handles.num_links); % Initialize an array to store link lengths
% 
% for i = 1:handles.num_links
%     Alpha(i) = str2double(handles.(['Alpha_', num2str(i)]).String) * pi / 180;
%     L(i) = str2double(handles.(['Length_' num2str(i)]).String); % Store lengths
% end
% 
% % Create the robot with the given link lengths
% 
% 
% Robot.name = "RRR_Robot"; % Desired end-effector position
% T_desired = [1 0 0 X;
%              0 1 0 Y;
%              0 0 1 Z;
%              0 0 0 1];
% 
% % Provide an initial guess for joint angles
% initial_guess = zeros(1, handles.num_links);
% 
% % Solve inverse kinematics without constraints using an initial guess
% J = Robot.ikine(T_desired, initial_guess, [1 1 1 0 0 0]) * 180 / pi;
% 
% % Update theta values in GUI
% for i = 1:3
%     handles.(['Theta_' num2str(i)]).String = num2str(floor(J(i))); % Convert angles to degrees and update GUI
% end

% Plot the robot with the computed joint angles
% Robot.plot(J * pi / 180);
PX = str2double(handles.Pos_X.String);
PY = str2double(handles.Pos_Y.String);
PZ = str2double(handles.Pos_Z.String);
Alpha = zeros(1, handles.num_links);
a = zeros(1, handles.num_links); % Initialize an array to store link lengths
for i = 1:handles.num_links
    Alpha(i) = str2double(handles.(['Alpha_', num2str(i)]).String) * pi / 180;
    a(i) = str2double(handles.(['Length_' num2str(i)]).String); % Store lengths
end
L = zeros(handles.num_links, 4); % Initialize L as a matrix

for i = 1:handles.num_links
    L(i, :) = [0 0 a(i) Alpha(i)];
end





Robot = SerialLink(L);
Robot.name = 'RRR_Robot';

T = [ 1 0 0 PX;
      0 1 0 PY;
      0 0 1 PZ;
      0 0 0 1];
  
J = Robot.ikine(T,[0 0 0],'mask',[1 1 1 0 0 0])*180/pi;
% for i=1:handles.num_links
% handles.(['Theta_' num2str(i)]).String = num2str(floor(J(i))); % Convert angles to degrees and update GUI   
% end
for i = 1:min(handles.num_links, 3)
    handles.(['Theta_' num2str(i)]).String = num2str(floor(J(i))); % Convert angles to degrees and update GUI   
end

for i = 4:handles.num_links
    handles.(['Theta_' num2str(i)]).String = num2str(floor(J(3))); % Use J(3) for indices greater than 3
end

Robot.plot(J*pi/180);
